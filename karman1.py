#!/usr/bin/python3
import logging
import ipaddress
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler
import puresnmp
import constant
import datetime
import allowed_users


# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º
def is_allowed_user(user_id):
    return user_id in allowed_users.ALLOWED_USERS


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
(MENU, CHECK_DEVICE, CHECK_PORTS) = range(3)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    filename=constant.LOG_STABLE,
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ IP-–∞–¥—Ä–µ—Å–∞
def is_valid_ip(ip):
    try:
        ipaddress.ip_address(ip)
        return True
    except ValueError:
        return False

# –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
def get_device_model(host):
    try:
        sys_descr = puresnmp.get(host, constant.ro_switchs, ".1.3.6.1.2.1.1.1.0").decode("utf-8")
        logger.info(f"sysDescr –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {host}: {sys_descr}")

        for model in constant.MODELS_OID_CONFIG.keys():
            if model in sys_descr:
                logger.info(f"–ú–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ {model}")
                return model

        logger.warning(f"–ú–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {host} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ–º Default.")
        return "Default"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {host}: {e}")
        return "Default"

# –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
def get_basic_info(host):
    try:
        model = get_device_model(host)
        oids = constant.MODELS_OID_CONFIG.get(model, constant.MODELS_OID_CONFIG["Default"])

        sysname = puresnmp.get(host, constant.ro_switchs, oids["sysname"]).decode("utf-8")
        uptime_ticks = puresnmp.get(host, constant.ro_switchs, oids["uptime"])

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
        if isinstance(uptime_ticks, datetime.timedelta):
            uptime_seconds = uptime_ticks.total_seconds()
        else:
            uptime_seconds = int(uptime_ticks) / 100  # –£—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ SNMP –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Å–æ—Ç—ã—Ö –¥–æ–ª—è—Ö —Å–µ–∫—É–Ω–¥

        days, rem = divmod(uptime_seconds, 86400)
        hours, rem = divmod(rem, 3600)
        minutes = rem // 60
        uptime = f"{int(days)} –¥–Ω. {int(hours)} —á. {int(minutes)} –º–∏–Ω."

        return f"‚úÖ‚úÖ‚úÖ –ò–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {sysname}\n–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime}"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ {host}: {e}")
        return "‚ùå‚ùå‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Ä—Ç–æ–≤
def get_port_status(host):
    try:
        model = get_device_model(host)
        oids = constant.MODELS_OID_CONFIG.get(model, constant.MODELS_OID_CONFIG["Default"])
        port_range = constant.PORT_RANGES.get(model, constant.PORT_RANGES["Default"])

        results = []
        for port_index in port_range:
            try:
                port_description = puresnmp.get(host, constant.ro_switchs, oids["port_description"] + f".{port_index}").decode("utf-8")
            except:
                port_description = "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
            try:
                oper_status = "UP" if int(puresnmp.get(host, constant.ro_switchs, oids["oper_status"] + f".{port_index}")) == 1 else "DOWN"
                oper_status_icon = "üü¢" if oper_status == "UP" else "üî¥"
            except:
                oper_status = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                oper_status_icon = "üî¥"
            try:
                admin_status = "UP" if int(puresnmp.get(host, constant.ro_switchs, oids["admin_status"] + f".{port_index}")) == 1 else "DOWN"
            except:
                admin_status = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            try:
                port_speed = f"{int(puresnmp.get(host, constant.ro_switchs, oids['port_speed'] + f'.{port_index}'))} Mbps"
            except:
                port_speed = "0 Mbps"

            results.append(
                f"{oper_status_icon} –ü–æ—Ä—Ç: {port_index} | –û–ø–∏—Å–∞–Ω–∏–µ: {port_description} | "
                f"–°—Ç–∞—Ç—É—Å: {oper_status} | –ê–¥–º–∏–Ω —Å—Ç–∞—Ç—É—Å: {admin_status} | –°–∫–æ—Ä–æ—Å—Ç—å: {port_speed}"
            )
        return "\n".join(results)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Ä—Ç–æ–≤ {host}: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ—Ä—Ç–æ–≤."

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
def start(update, context):
    user = update.message.from_user
    reply_keyboard = [["üí• –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"]]
    update.message.reply_text(
        f"‚úå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.full_name}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True),
    )
    return MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
def check_device(update, context):
    host = update.message.text.strip()
    if not is_valid_ip(host):
        update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP-–∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return CHECK_DEVICE

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª IP: {host}")
    context.user_data["host"] = host

    result = get_basic_info(host)
    update.message.reply_text(result)

    # –°–±—Ä–æ—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
    if "–û—à–∏–±–∫–∞" in result:
        context.user_data.clear()
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
        return CHECK_DEVICE

    reply_keyboard = [["–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤", "–°–±—Ä–æ—Å"]]
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
    )
    return MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é
def menu(update, context):
    message = update.message.text.strip()

    if "üí• –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ" in message:
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", reply_markup=ReplyKeyboardRemove())
        return CHECK_DEVICE

    elif "–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤" in message or "–ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Ä—Ç—ã" in message:
        host = context.user_data.get("host", "")
        if not host:
            update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ IP-–∞–¥—Ä–µ—Å.")
            return MENU

        result = get_port_status(host)
        update.message.reply_text(result)

        reply_keyboard = [["–ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Ä—Ç—ã", "–°–±—Ä–æ—Å"]]
        update.message.reply_text(
            "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
        )
        return MENU

    elif "–°–±—Ä–æ—Å" in message:
        context.user_data.clear()
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
        return CHECK_DEVICE

    update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    return MENU

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    updater = Updater(constant.TOKEN, use_context=True)
    dp = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MENU: [MessageHandler(Filters.text & ~Filters.command, menu)],
            CHECK_DEVICE: [MessageHandler(Filters.text & ~Filters.command, check_device)],
        },
        fallbacks=[CommandHandler("cancel", lambda update, context: update.message.reply_text("–ü—Ä–æ—â–∞–π—Ç–µ!"))],
    )

    dp.add_handler(conv_handler)
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
